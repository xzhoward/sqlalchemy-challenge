{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func\n",
    "\n",
    "from flask import Flask, jsonify\n",
    "import datetime as dt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "engine = create_engine(\"sqlite:///Resources/hawaii.sqlite\")\n",
    "\n",
    "# reflect an existing database into a new model\n",
    "Base = automap_base()\n",
    "# reflect the tables\n",
    "Base.prepare(engine, reflect=True)\n",
    "\n",
    "# Save reference to the table\n",
    "Measurement = Base.classes.measurement\n",
    "Station = Base.classes.station"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "app = Flask(__name__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.route(\"/\")\n",
    "def welcome():\n",
    "    \"\"\"List all available api routes.\"\"\"\n",
    "    return (\n",
    "        f\"Available Routes:<br/>\"\n",
    "        f\"/api/v1.0/precipitation<br/>\"\n",
    "        f\"/api/v1.0/stations<br/>\"\n",
    "        f\"/api/v1.0/tobs<br/>\"\n",
    "        f\"/api/v1.0/start<br/>\"\n",
    "        f\"/api/v1.0/start/end\"\n",
    "    )\n",
    "\n",
    "\n",
    "@app.route(\"/api/v1.0/precipitation\")\n",
    "def precipitation():"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    " # Create our session (link) from Python to the DB\n",
    "    session = Session(engine)\n",
    "\n",
    "    \"\"\"Return a list of all precipitation and date\"\"\"\n",
    "    # Query all precipitation and date\n",
    "    results = session.query(Measurement.date,Measurement.prcp).all()\n",
    "\n",
    "    session.close()\n",
    "\n",
    "    # Convert list of tuples into dictionary\n",
    "    all_precepitation=[]\n",
    "    for date,prcp in results:\n",
    "        precipitation_dict = {}\n",
    "        precipitation_dict[date] = prcp\n",
    "        all_precepitation.append(precipitation_dict)\n",
    "\n",
    "    return jsonify(all_precepitation)\n",
    "\n",
    "@app.route(\"/api/v1.0/stations\")\n",
    "def stations():\n",
    "    # Create our session (link) from Python to the DB\n",
    "    session = Session(engine)\n",
    "\n",
    "    \"\"\"Return a list of all stations\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "    # Query all stations\n",
    "    results = session.query(Station.id,Station.station,Station.name,Station.latitude,Station.longitude,Station.elevation).all()\n",
    "    session.close()\n",
    "    all_station=[]\n",
    "    for id,station,name,latitude,longitude,elevation in results:\n",
    "        station_dict={}\n",
    "        station_dict['Id']=id\n",
    "        station_dict['station']=station\n",
    "        station_dict['name']=name\n",
    "        station_dict['latitude']=latitude\n",
    "        station_dict['longitude']=longitude\n",
    "        station_dict['elevation']=elevation\n",
    "        all_station.append(station_dict)\n",
    "    return jsonify(all_station)\n",
    "\n",
    "@app.route(\"/api/v1.0/tobs\")\n",
    "def tempartureobs():"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "  # Create our session (link) from Python to the DB\n",
    "    session = Session(engine)\n",
    "\n",
    "    \"\"\"Return a list of all temparture observation\"\"\"\n",
    "    # Calculate the date 1 year ago from the last data point in the database\n",
    "    results_date=session.query(Measurement.date).order_by(Measurement.date.desc()).first()\n",
    "    str_date=list(np.ravel(results_date))[0]\n",
    "    latest_date=dt.datetime.strptime(str_date,\"%Y-%m-%d\")\n",
    "    year_back=latest_date-dt.timedelta(days=366)\n",
    "# Perform a query to retrieve the data and precipitation scores\n",
    "    results=session.query(Measurement.date, Measurement.tobs).order_by(Measurement.date.desc()).\\\n",
    "            filter(Measurement.date>=year_back).all()\n",
    "    session.close()\n",
    "    all_temperature=[]\n",
    "    for tobs,date in results:\n",
    "        tobs_dict={}\n",
    "        tobs_dict['date']=date\n",
    "        tobs_dict['tobs']=tobs\n",
    "        all_temperature.append(tobs_dict)\n",
    "    return jsonify(all_temperature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This function called `calc_temps` will accept start date and end date in the format '%Y-%m-%d' \n",
    "# and return the minimum, average, and maximum temperatures for that range of dates\n",
    "@app.route(\"/api/v1.0/<start>/<end>\")\n",
    "def calc_temps(start, end):\n",
    "    # Create our session (link) from Python to the DB\n",
    "    session = Session(engine)\n",
    "    \"\"\"TMIN, TAVG, and TMAX for a list of dates.\n",
    "    \n",
    "    Args:\n",
    "        start_date (string): A date string in the format %Y-%m-%d\n",
    "        end_date (string): A date string in the format %Y-%m-%d\n",
    "        \n",
    "    Returns:\n",
    "        TMIN, TAVE, and TMAX\n",
    "    \"\"\"\n",
    "    \n",
    "    results=session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).\\\n",
    "                filter(Measurement.date >= start).filter(Measurement.date <= end).all()\n",
    "    session.close()\n",
    "    temp_obs={}\n",
    "    temp_obs[\"Min_Temp\"]=results[0][0]\n",
    "    temp_obs[\"avg_Temp\"]=results[0][1]\n",
    "    temp_obs[\"max_Temp\"]=results[0][2]\n",
    "    return jsonify(temp_obs)\n",
    "\n",
    "@app.route(\"/api/v1.0/<start>\")\n",
    "def calc_temps_sd(start):\n",
    "    # Create our session (link) from Python to the DB\n",
    "    session = Session(engine)\n",
    "    \"\"\"TMIN, TAVG, and TMAX for a list of dates.\n",
    "    \n",
    "    Args:\n",
    "        start_date (string): A date string in the format %Y-%m-%d\n",
    "        \n",
    "    Returns:\n",
    "        TMIN, TAVE, and TMAX\n",
    "    \"\"\"\n",
    "    \n",
    "    results=session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).\\\n",
    "                filter(Measurement.date >= start).all()\n",
    "    session.close()\n",
    "    temp_obs={}\n",
    "    temp_obs[\"Min_Temp\"]=results[0][0]\n",
    "    temp_obs[\"avg_Temp\"]=results[0][1]\n",
    "    temp_obs[\"max_Temp\"]=results[0][2]\n",
    "    return jsonify(temp_obs)\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
